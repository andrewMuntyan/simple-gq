// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<WithApollo /> renders and displays properly 1`] = `
<ApolloProvider
  client={
    ApolloClient {
      "cache": InMemoryCache {
        "broadcastWatches": [MockFunction],
        "diff": [MockFunction],
        "evict": [MockFunction],
        "extract": [MockFunction],
        "maybeBroadcastWatch": [MockFunction],
        "performTransaction": [MockFunction],
        "read": [MockFunction],
        "readFragment": [MockFunction],
        "readQuery": [MockFunction],
        "recordOptimisticTransaction": [MockFunction],
        "removeOptimistic": [MockFunction],
        "reset": [MockFunction],
        "restore": [MockFunction],
        "transformDocument": [MockFunction],
        "transformForLink": [MockFunction],
        "watch": [MockFunction],
        "write": [MockFunction],
        "writeData": [MockFunction],
        "writeFragment": [MockFunction],
        "writeQuery": [MockFunction],
      },
      "clearStoreCallbacks": Array [],
      "defaultOptions": Object {},
      "disableNetworkFetches": false,
      "link": HttpLink {
        "concat": [MockFunction],
        "request": [MockFunction],
        "split": [MockFunction],
      },
      "localState": LocalState {
        "cache": InMemoryCache {
          "broadcastWatches": [MockFunction],
          "diff": [MockFunction],
          "evict": [MockFunction],
          "extract": [MockFunction],
          "maybeBroadcastWatch": [MockFunction],
          "performTransaction": [MockFunction],
          "read": [MockFunction],
          "readFragment": [MockFunction],
          "readQuery": [MockFunction],
          "recordOptimisticTransaction": [MockFunction],
          "removeOptimistic": [MockFunction],
          "reset": [MockFunction],
          "restore": [MockFunction],
          "transformDocument": [MockFunction],
          "transformForLink": [MockFunction],
          "watch": [MockFunction],
          "write": [MockFunction],
          "writeData": [MockFunction],
          "writeFragment": [MockFunction],
          "writeQuery": [MockFunction],
        },
        "client": [Circular],
      },
      "mutate": [Function],
      "query": [Function],
      "queryDeduplication": true,
      "queryManager": QueryManager {
        "assumeImmutableResults": false,
        "clientAwareness": Object {
          "name": undefined,
          "version": undefined,
        },
        "dataStore": DataStore {
          "cache": InMemoryCache {
            "broadcastWatches": [MockFunction],
            "diff": [MockFunction],
            "evict": [MockFunction],
            "extract": [MockFunction],
            "maybeBroadcastWatch": [MockFunction],
            "performTransaction": [MockFunction],
            "read": [MockFunction],
            "readFragment": [MockFunction],
            "readQuery": [MockFunction],
            "recordOptimisticTransaction": [MockFunction],
            "removeOptimistic": [MockFunction],
            "reset": [MockFunction],
            "restore": [MockFunction],
            "transformDocument": [MockFunction],
            "transformForLink": [MockFunction],
            "watch": [MockFunction],
            "write": [MockFunction],
            "writeData": [MockFunction],
            "writeFragment": [MockFunction],
            "writeQuery": [MockFunction],
          },
        },
        "fetchQueryRejectFns": Map {},
        "idCounter": 1,
        "inFlightLinkObservables": Map {},
        "link": HttpLink {
          "concat": [MockFunction],
          "request": [MockFunction],
          "split": [MockFunction],
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "broadcastWatches": [MockFunction],
            "diff": [MockFunction],
            "evict": [MockFunction],
            "extract": [MockFunction],
            "maybeBroadcastWatch": [MockFunction],
            "performTransaction": [MockFunction],
            "read": [MockFunction],
            "readFragment": [MockFunction],
            "readQuery": [MockFunction],
            "recordOptimisticTransaction": [MockFunction],
            "removeOptimistic": [MockFunction],
            "reset": [MockFunction],
            "restore": [MockFunction],
            "transformDocument": [MockFunction],
            "transformForLink": [MockFunction],
            "watch": [MockFunction],
            "write": [MockFunction],
            "writeData": [MockFunction],
            "writeFragment": [MockFunction],
            "writeQuery": [MockFunction],
          },
          "client": [Circular],
        },
        "mutationStore": MutationStore {
          "store": Object {},
        },
        "onBroadcast": [Function],
        "pollingInfoByQueryId": Map {},
        "queries": Map {},
        "queryDeduplication": true,
        "queryStore": QueryStore {
          "store": Object {},
        },
        "ssrMode": false,
        "transformCache": WeakMap {},
      },
      "reFetchObservableQueries": [Function],
      "resetStore": [Function],
      "resetStoreCallbacks": Array [],
      "store": DataStore {
        "cache": InMemoryCache {
          "broadcastWatches": [MockFunction],
          "diff": [MockFunction],
          "evict": [MockFunction],
          "extract": [MockFunction],
          "maybeBroadcastWatch": [MockFunction],
          "performTransaction": [MockFunction],
          "read": [MockFunction],
          "readFragment": [MockFunction],
          "readQuery": [MockFunction],
          "recordOptimisticTransaction": [MockFunction],
          "removeOptimistic": [MockFunction],
          "reset": [MockFunction],
          "restore": [MockFunction],
          "transformDocument": [MockFunction],
          "transformForLink": [MockFunction],
          "watch": [MockFunction],
          "write": [MockFunction],
          "writeData": [MockFunction],
          "writeFragment": [MockFunction],
          "writeQuery": [MockFunction],
        },
      },
      "typeDefs": undefined,
      "version": "2.6.4",
      "watchQuery": [Function],
    }
  }
>
  <BaseComponent />
</ApolloProvider>
`;
